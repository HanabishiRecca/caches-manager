#!/bin/bash

APP_NAME="caches-manager"

set -euo pipefail
shopt -s nullglob

create_cache() {
    local dir
    local parent
    dir="$(realpath -s "$2")"
    parent="$(dirname "${dir}")"
    echo -n "Linking '${dir}'... "
    mkdir -p "$1"

    if [ ! -d "${parent}" ]; then
        echo "parent directory does not exist, skip."
        return
    fi

    if [ ! -w "${parent}" ]; then
        echo "no write access to parent directory, skip."
        return
    fi

    if [ -L "${dir}" ]; then
        if [ "$(readlink "${dir}")" == "$1" ]; then
            echo "done."
            return
        fi
    elif [ -e "${dir}" ]; then
        echo -n "target exists, backing up... "
        mv -fT "${dir}" "${dir}.bak"
    fi

    if ln -sfT "$1" "${dir}"; then
        echo "done."
    else
        echo "failed."
    fi
}

declare -a TARGETS

read_config() {
    while read -r line || [ -n "${line}" ]; do
        [ "${line}" ] && TARGETS+=("${line}")
    done < "$1"
}

read_configs_from() {
    [ -d "$1" ] || return

    for f in "$1/"*.conf; do
        read_config "${f}"
    done
}

create_system_caches() {
    if ((UID != 0)); then
        echo "System job requires root privileges."
        return 13
    fi

    local dir="/dev/shm"

    if [ ! -d "${dir}" ]; then
        echo "System tmpfs directory '${dir}' not found."
        return 2
    fi

    echo "Linking system targets..."
    TARGETS=()
    read_configs_from "/etc/${APP_NAME}/system"

    for t in "${TARGETS[@]}"; do
        create_cache "${dir}/tmp/${t}" "${t}"
    done
}

create_user_caches() {
    local dir="${XDG_RUNTIME_DIR:-"/run/user/${UID}"}"

    if [ ! -d "${dir}" ]; then
        echo "User tmpfs directory '${dir}' not found."
        return 2
    fi

    echo "Linking user targets..."
    TARGETS=()
    read_configs_from "/etc/${APP_NAME}/user"
    read_configs_from "${XDG_CONFIG_HOME:-"${HOME}/.config"}/${APP_NAME}"

    for t in "${TARGETS[@]}"; do
        create_cache "${dir}/tmp/${t}" "${HOME}/${t}"
    done
}

declare -A ARGS=()

for arg in "$@"; do
    ARGS["${arg}"]=1
done

if [ -v "ARGS['--system']" ]; then
    create_system_caches
fi

if [ -v "ARGS['--user']" ]; then
    create_user_caches
fi
